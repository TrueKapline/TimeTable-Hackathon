{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program\\\\xampp\\\\htdocs\\\\google-calendar-clone\\\\src\\\\components\\\\SmallCalendar.js\",\n    _s = $RefreshSig$();\n\nimport dayjs from \"dayjs\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport GlobalContext from \"../context/GlobalContext\";\nimport { getMonth } from \"../util\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SmallCalendar() {\n  _s();\n\n  const [currentMonthIdx, setCurrentMonthIdx] = useState(dayjs().month());\n  const [currentMonth, setCurrentMonth] = useState(getMonth());\n  useEffect(() => {\n    setCurrentMonth(getMonth(currentMonthIdx));\n  }, [currentMonthIdx]);\n  const {\n    monthIndex,\n    setSmallCalendarMonth,\n    setDaySelected,\n    daySelected\n  } = useContext(GlobalContext);\n  useEffect(() => {\n    setCurrentMonthIdx(monthIndex);\n  }, [monthIndex]);\n\n  function handlePrevMonth() {\n    setCurrentMonthIdx(currentMonthIdx - 1);\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthIdx(currentMonthIdx + 1);\n  }\n\n  function getDayClass(day) {\n    const format = \"DD-MM-YY\";\n    const nowDay = dayjs().format(format);\n    const currDay = day.format(format);\n    const slcDay = daySelected && daySelected.format(format);\n\n    if (nowDay === currDay) {\n      return \"bg-blue-500 rounded-full text-white\";\n    } else if (currDay === slcDay) {\n      return \"bg-blue-100 rounded-full text-blue-600 font-bold\";\n    } else {\n      return \"\";\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mt-9\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"flex justify-between\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-500 font-bold\",\n        children: dayjs(new Date(dayjs().year(), currentMonthIdx)).format(\"MMMM YYYY\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePrevMonth,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"material-icons-outlined cursor-pointer text-gray-600 mx-2\",\n            children: \"chevron_left\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextMonth,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"material-icons-outlined cursor-pointer text-gray-600 mx-2\",\n            children: \"chevron_right\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-7 grid-rows-6\",\n      children: [currentMonth[0].map((day, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-sm py-1 text-center\",\n        children: day.format(\"dd\").charAt(0)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)), currentMonth.map((row, i) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: row.map((day, idx) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setSmallCalendarMonth(currentMonthIdx);\n            setDaySelected(day);\n          },\n          className: `py-1 w-full ${getDayClass(day)}`,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm\",\n            children: day.format(\"D\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 17\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }, this))\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SmallCalendar, \"/LFDnzkUHuCwbW/yTYAiVD8Sscs=\");\n\n_c = SmallCalendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SmallCalendar\");","map":{"version":3,"sources":["D:/Program/xampp/htdocs/google-calendar-clone/src/components/SmallCalendar.js"],"names":["dayjs","React","useContext","useEffect","useState","GlobalContext","getMonth","SmallCalendar","currentMonthIdx","setCurrentMonthIdx","month","currentMonth","setCurrentMonth","monthIndex","setSmallCalendarMonth","setDaySelected","daySelected","handlePrevMonth","handleNextMonth","getDayClass","day","format","nowDay","currDay","slcDay","Date","year","map","i","charAt","row","idx"],"mappings":"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","sourcesContent":["import dayjs from \"dayjs\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport GlobalContext from \"../context/GlobalContext\";\r\nimport { getMonth } from \"../util\";\r\n\r\nexport default function SmallCalendar() {\r\n  const [currentMonthIdx, setCurrentMonthIdx] = useState(\r\n    dayjs().month()\r\n  );\r\n  const [currentMonth, setCurrentMonth] = useState(getMonth());\r\n  useEffect(() => {\r\n    setCurrentMonth(getMonth(currentMonthIdx));\r\n  }, [currentMonthIdx]);\r\n\r\n  const {\r\n    monthIndex,\r\n    setSmallCalendarMonth,\r\n    setDaySelected,\r\n    daySelected,\r\n  } = useContext(GlobalContext);\r\n\r\n  useEffect(() => {\r\n    setCurrentMonthIdx(monthIndex);\r\n  }, [monthIndex]);\r\n\r\n  function handlePrevMonth() {\r\n    setCurrentMonthIdx(currentMonthIdx - 1);\r\n  }\r\n  function handleNextMonth() {\r\n    setCurrentMonthIdx(currentMonthIdx + 1);\r\n  }\r\n  function getDayClass(day) {\r\n    const format = \"DD-MM-YY\";\r\n    const nowDay = dayjs().format(format);\r\n    const currDay = day.format(format);\r\n    const slcDay = daySelected && daySelected.format(format);\r\n    if (nowDay === currDay) {\r\n      return \"bg-blue-500 rounded-full text-white\";\r\n    } else if (currDay === slcDay) {\r\n      return \"bg-blue-100 rounded-full text-blue-600 font-bold\";\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"mt-9\">\r\n      <header className=\"flex justify-between\">\r\n        <p className=\"text-gray-500 font-bold\">\r\n          {dayjs(new Date(dayjs().year(), currentMonthIdx)).format(\r\n            \"MMMM YYYY\"\r\n          )}\r\n        </p>\r\n        <div>\r\n          <button onClick={handlePrevMonth}>\r\n            <span className=\"material-icons-outlined cursor-pointer text-gray-600 mx-2\">\r\n              chevron_left\r\n            </span>\r\n          </button>\r\n          <button onClick={handleNextMonth}>\r\n            <span className=\"material-icons-outlined cursor-pointer text-gray-600 mx-2\">\r\n              chevron_right\r\n            </span>\r\n          </button>\r\n        </div>\r\n      </header>\r\n      <div className=\"grid grid-cols-7 grid-rows-6\">\r\n        {currentMonth[0].map((day, i) => (\r\n          <span key={i} className=\"text-sm py-1 text-center\">\r\n            {day.format(\"dd\").charAt(0)}\r\n          </span>\r\n        ))}\r\n        {currentMonth.map((row, i) => (\r\n          <React.Fragment key={i}>\r\n            {row.map((day, idx) => (\r\n              <button\r\n                key={idx}\r\n                onClick={() => {\r\n                  setSmallCalendarMonth(currentMonthIdx);\r\n                  setDaySelected(day);\r\n                }}\r\n                className={`py-1 w-full ${getDayClass(day)}`}\r\n              >\r\n                <span className=\"text-sm\">{day.format(\"D\")}</span>\r\n              </button>\r\n            ))}\r\n          </React.Fragment>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
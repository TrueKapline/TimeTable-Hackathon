{"ast":null,"code":"var _jsxFileName = \"D:\\\\Program\\\\xampp\\\\htdocs\\\\google-calendar-clone\\\\src\\\\context\\\\ContextWrapper.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer, useMemo } from \"react\";\nimport GlobalContext from \"./GlobalContext\";\nimport dayjs from \"dayjs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction savedEventsReducer(state, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case \"push\":\n      return [...state, payload];\n\n    case \"update\":\n      return state.map(evt => evt.id === payload.id ? payload : evt);\n\n    case \"delete\":\n      return state.filter(evt => evt.id !== payload.id);\n\n    default:\n      throw new Error();\n  }\n}\n\nfunction initEvents() {\n  const storageEvents = localStorage.getItem(\"savedEvents\");\n  const parsedEvents = storageEvents ? JSON.parse(storageEvents) : [];\n  return parsedEvents;\n}\n\nexport default function ContextWrapper(props) {\n  _s();\n\n  const [monthIndex, setMonthIndex] = useState(dayjs().month());\n  const [smallCalendarMonth, setSmallCalendarMonth] = useState(null);\n  const [daySelected, setDaySelected] = useState(dayjs());\n  const [showEventModal, setShowEventModal] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState(null);\n  const [labels, setLabels] = useState([]);\n  const [savedEvents, dispatchCalEvent] = useReducer(savedEventsReducer, [], initEvents);\n  const filteredEvents = useMemo(() => {\n    return savedEvents.filter(evt => labels.filter(lbl => lbl.checked).map(lbl => lbl.label).includes(evt.label));\n  }, [savedEvents, labels]);\n  useEffect(() => {\n    localStorage.setItem(\"savedEvents\", JSON.stringify(savedEvents));\n  }, [savedEvents]);\n  useEffect(() => {\n    setLabels(prevLabels => {\n      return [...new Set(savedEvents.map(evt => evt.label))].map(label => {\n        const currentLabel = prevLabels.find(lbl => lbl.label === label);\n        return {\n          label,\n          checked: currentLabel ? currentLabel.checked : true\n        };\n      });\n    });\n  }, [savedEvents]);\n  useEffect(() => {\n    if (smallCalendarMonth !== null) {\n      setMonthIndex(smallCalendarMonth);\n    }\n  }, [smallCalendarMonth]);\n  useEffect(() => {\n    if (!showEventModal) {\n      setSelectedEvent(null);\n    }\n  }, [showEventModal]);\n\n  function updateLabel(label) {\n    setLabels(labels.map(lbl => lbl.label === label.label ? label : lbl));\n  }\n\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      monthIndex,\n      setMonthIndex\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ContextWrapper, \"e3mUwRAUT323N5XN46Kbdi3PAi8=\");\n\n_c = ContextWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextWrapper\");","map":{"version":3,"sources":["D:/Program/xampp/htdocs/google-calendar-clone/src/context/ContextWrapper.js"],"names":["React","useState","useEffect","useReducer","useMemo","GlobalContext","dayjs","savedEventsReducer","state","type","payload","map","evt","id","filter","Error","initEvents","storageEvents","localStorage","getItem","parsedEvents","JSON","parse","ContextWrapper","props","monthIndex","setMonthIndex","month","smallCalendarMonth","setSmallCalendarMonth","daySelected","setDaySelected","showEventModal","setShowEventModal","selectedEvent","setSelectedEvent","labels","setLabels","savedEvents","dispatchCalEvent","filteredEvents","lbl","checked","label","includes","setItem","stringify","prevLabels","Set","currentLabel","find","updateLabel","children"],"mappings":"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","sourcesContent":["import React, {\r\n  useState,\r\n  useEffect,\r\n  useReducer,\r\n  useMemo,\r\n} from \"react\";\r\nimport GlobalContext from \"./GlobalContext\";\r\nimport dayjs from \"dayjs\";\r\n\r\nfunction savedEventsReducer(state, { type, payload }) {\r\n  switch (type) {\r\n    case \"push\":\r\n      return [...state, payload];\r\n    case \"update\":\r\n      return state.map((evt) =>\r\n        evt.id === payload.id ? payload : evt\r\n      );\r\n    case \"delete\":\r\n      return state.filter((evt) => evt.id !== payload.id);\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\nfunction initEvents() {\r\n  const storageEvents = localStorage.getItem(\"savedEvents\");\r\n  const parsedEvents = storageEvents ? JSON.parse(storageEvents) : [];\r\n  return parsedEvents;\r\n}\r\n\r\nexport default function ContextWrapper(props) {\r\n  const [monthIndex, setMonthIndex] = useState(dayjs().month());\r\n  const [smallCalendarMonth, setSmallCalendarMonth] = useState(null);\r\n  const [daySelected, setDaySelected] = useState(dayjs());\r\n  const [showEventModal, setShowEventModal] = useState(false);\r\n  const [selectedEvent, setSelectedEvent] = useState(null);\r\n  const [labels, setLabels] = useState([]);\r\n  const [savedEvents, dispatchCalEvent] = useReducer(\r\n    savedEventsReducer,\r\n    [],\r\n    initEvents\r\n  );\r\n\r\n  const filteredEvents = useMemo(() => {\r\n    return savedEvents.filter((evt) =>\r\n      labels\r\n        .filter((lbl) => lbl.checked)\r\n        .map((lbl) => lbl.label)\r\n        .includes(evt.label)\r\n    );\r\n  }, [savedEvents, labels]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"savedEvents\", JSON.stringify(savedEvents));\r\n  }, [savedEvents]);\r\n\r\n  useEffect(() => {\r\n    setLabels((prevLabels) => {\r\n      return [...new Set(savedEvents.map((evt) => evt.label))].map(\r\n        (label) => {\r\n          const currentLabel = prevLabels.find(\r\n            (lbl) => lbl.label === label\r\n          );\r\n          return {\r\n            label,\r\n            checked: currentLabel ? currentLabel.checked : true,\r\n          };\r\n        }\r\n      );\r\n    });\r\n  }, [savedEvents]);\r\n\r\n  useEffect(() => {\r\n    if (smallCalendarMonth !== null) {\r\n      setMonthIndex(smallCalendarMonth);\r\n    }\r\n  }, [smallCalendarMonth]);\r\n\r\n  useEffect(() => {\r\n    if (!showEventModal) {\r\n      setSelectedEvent(null);\r\n    }\r\n  }, [showEventModal]);\r\n\r\n  function updateLabel(label) {\r\n    setLabels(\r\n      labels.map((lbl) => (lbl.label === label.label ? label : lbl))\r\n    );\r\n  }\r\n\r\n  return (\r\n    <GlobalContext.Provider\r\n      value={{\r\n        monthIndex,\r\n        setMonthIndex,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </GlobalContext.Provider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
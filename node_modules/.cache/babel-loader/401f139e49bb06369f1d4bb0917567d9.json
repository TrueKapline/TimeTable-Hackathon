{"ast":null,"code":"import React from \"react\";\nconst GlobalContext = /*#__PURE__*/React.createContext({\n  monthIndex: 0,\n  setMonthIndex: index => {},\n  smallCalendarMonth: 0,\n  setSmallCalendarMonth: index => {},\n  daySelected: null,\n  setDaySelected: day => {},\n  showEventModal: false,\n  setShowEventModal: () => {},\n  dispatchCalEvent: ({\n    type,\n    payload\n  }) => {},\n  savedEvents: [],\n  selectedEvent: null,\n  setSelectedEvent: () => {},\n  setLabels: () => {},\n  labels: [],\n  updateLabel: () => {},\n  filteredEvents: []\n});\nexport default GlobalContext;","map":{"version":3,"sources":["D:/Program/xampp/htdocs/google-calendar-clone/src/context/GlobalContext.js"],"names":["React","GlobalContext","createContext","monthIndex","setMonthIndex","index","smallCalendarMonth","setSmallCalendarMonth","daySelected","setDaySelected","day","showEventModal","setShowEventModal","dispatchCalEvent","type","payload","savedEvents","selectedEvent","setSelectedEvent","setLabels","labels","updateLabel","filteredEvents"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,aAAa,gBAAGD,KAAK,CAACE,aAAN,CAAoB;AACxCC,EAAAA,UAAU,EAAE,CAD4B;AAExCC,EAAAA,aAAa,EAAGC,KAAD,IAAW,CAAE,CAFY;AAGxCC,EAAAA,kBAAkB,EAAE,CAHoB;AAIxCC,EAAAA,qBAAqB,EAAGF,KAAD,IAAW,CAAE,CAJI;AAKxCG,EAAAA,WAAW,EAAE,IAL2B;AAMxCC,EAAAA,cAAc,EAAGC,GAAD,IAAS,CAAE,CANa;AAOxCC,EAAAA,cAAc,EAAE,KAPwB;AAQxCC,EAAAA,iBAAiB,EAAE,MAAM,CAAE,CARa;AASxCC,EAAAA,gBAAgB,EAAE,CAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAD,KAAuB,CAAE,CATH;AAUxCC,EAAAA,WAAW,EAAE,EAV2B;AAWxCC,EAAAA,aAAa,EAAE,IAXyB;AAYxCC,EAAAA,gBAAgB,EAAE,MAAM,CAAE,CAZc;AAaxCC,EAAAA,SAAS,EAAE,MAAM,CAAE,CAbqB;AAcxCC,EAAAA,MAAM,EAAE,EAdgC;AAexCC,EAAAA,WAAW,EAAE,MAAM,CAAE,CAfmB;AAgBxCC,EAAAA,cAAc,EAAE;AAhBwB,CAApB,CAAtB;AAmBA,eAAerB,aAAf","sourcesContent":["import React from \"react\";\r\n\r\nconst GlobalContext = React.createContext({\r\n  monthIndex: 0,\r\n  setMonthIndex: (index) => {},\r\n  smallCalendarMonth: 0,\r\n  setSmallCalendarMonth: (index) => {},\r\n  daySelected: null,\r\n  setDaySelected: (day) => {},\r\n  showEventModal: false,\r\n  setShowEventModal: () => {},\r\n  dispatchCalEvent: ({ type, payload }) => {},\r\n  savedEvents: [],\r\n  selectedEvent: null,\r\n  setSelectedEvent: () => {},\r\n  setLabels: () => {},\r\n  labels: [],\r\n  updateLabel: () => {},\r\n  filteredEvents: [],\r\n});\r\n\r\nexport default GlobalContext;\r\n"]},"metadata":{},"sourceType":"module"}
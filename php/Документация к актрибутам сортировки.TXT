Атрибуты сортировки:
  * table: номер_сортируемой_таблицы
  ---Только для 3 таблицы---
  * date: дата_начала
  * day_count: количество_дней
  * pair_number: номер_пары 
  * type_sort: тип_сортировки
  * output: [заданный_атрибут_вывода_1, заданный_атрибут_вывода_2, ...]
  * output_key: [ключ_вывода_1, ключ_вывода_2, ...]
  * type: тип_пары
  * type_lessons: тип_занятия
  * subgroup_number: номер_подгруппы
  * delete_pair: выводить_ли_удалённые_пары(null - true)
  * search: текст_поиска
  * search_type: тип_поиска
  ---Только для 3 таблицы---

  Возможные значения атрибутов:
  * {номер_сортируемой_таблицы}:
  - Тип таблицы, с которой вы хотим работать
  * * 1 - таблица расписания семестра
  * * 2 - таблица мероприятий, проектов и переносов
  * * 3 - таблица реального времени(1 таблица корректируется под данные 2 таблицы)
  * {дата_начала}:
  - Дата, начиная с которой будет возвращаться расписание
  * * "год-месяц-день" - формат входящего значения
  * {количество_дней}:
  - Количество дней, которое мы хотим вернуть, начиная с указанной даты
  * * количество - целочисленное число от 1
  * {номер_пары}:
  - Номер пары, которую мы хотим получить
  * * номер - целочисленное число от 0 до 8; 0 - если хотим вернуть все пары в дне
  * {тип_сортировки}:
  - Тип сортировки, которую мы хотим применить к запрашиваемым данным
  * * null - сортировка не нужна
  * * "date" - сортировать по дате
  * * "groups" - сортировать по группам по названиям (!!! разработаю по надобности, не работает)
  * * "teachers" - сортировать по преподавателям по именам (!!! разработаю по надобности, не работает)
  * * "auditories" - сортировать по аудитории по названиям (!!! разработаю по надобности, не работает)
  * * "events" - сортировать по мероприятиям по названиям (!!! разработаю по надобности, не работает)
  * * "project" - сортировать по проектам по названиям (!!! разработаю по надобности, не работает)
  * {заданный_атрибут_вывода}:
  - Атрибут, который будет фильтровать данные(Например вывести пары только с заданным учителем или для данной группы)
  * * null - фильтра не будет, выведет всё
  * * "groups" - выведет только пары только для заданной группы
  * * "teachers" - выведет только пары только с заданным учителем
  * * "auditories" - выведет только пары с заданной аудиторией
  * * "events" - выведет только пары с заданным мероприятием
  * * "projects" - выведет только пары с заданным проектом
  * * "title" - выведет только пары с заданным названием
  * * "lesson" - выведет только пары с заданным занятием
  * * "lecture" - выведет только пары с заданной лекцией
  * * "practice" - выведет только пары с заданной практикой
  * * "laboratory" - выведет только пары с заданной лабораторной
  * {ключ_вывода}:
  - Ключевое слово для заданного фильтра(например если задали "teachers", то ключевое слово может быть "Иван Иванович")
  * * ключевое слово - слово, по которому будет происходить фильтр
  * {тип_пары}:
  - Тип пар, которые мы хотим получить
  * * null - все типы пар
  * * 0 - только занятия
  * * 1 - только мероприятия
  * * 2 - только проекты
  * {тип_занятия}:
  - Тип занятия, если задали тип пары занятие
  * * null - если тип пары не занятие или хотим вывести все типы занятий
  * * 0 - лекция
  * * 1 - практика
  * * 2 - лабораторная
  * {номер_подгруппы}:
  - Номер подгруппы, если задали тип занятия лабораторная
  * * null - если тип занятия не лаборатная
  * * 1 - первая подгруппа
  * * 2 - вторая подгруппа
  * {выводить_ли_удалённые_пары}:
  - Нужно ли выводить удалённые или перенесённые пары
  * * true - да
  * * false - нет
  * {текст_поиска}:
  - По этому тексту поиска сортируется расписание
  * * строка - обычная стрик строка с буковками
  * {тип_поиска}:
  - Какие параметры мы будем подвергать поиску
  * * null - поиск по всему
  * * title - поиск по названию